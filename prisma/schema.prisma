generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL_NON_POOLING") // Use direct connection for both
  directUrl = env("POSTGRES_URL_NON_POOLING") // Use direct connection
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  firstName String   @db.VarChar(255)
  lastName  String   @db.VarChar(255)
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  artworks      Artwork[]
  buyerOrders   Order[]   @relation("BuyerOrders")
  sellerOrders  Order[]   @relation("SellerOrders")
  favorites     Favorite[]
  buyerReviews  Review[]  @relation("BuyerReviews")
  sellerReviews Review[]  @relation("SellerReviews")

  @@map("users")
}

model Artwork {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar(255)
  description String
  price       Decimal  @db.Decimal(10, 2)
  category    String   @db.VarChar(255)
  tags        String[] @default([])
  userId      String   @db.Uuid
  imageUrl    String
  status      String   @default("active") @db.VarChar(255)
  medium      String?  @db.VarChar(255)
  dimensions  String?  @db.VarChar(255)
  isDigital   Boolean  @default(false)
  isCommission Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  files      ArtworkFile[]
  orderItems OrderItem[]
  favorites  Favorite[]
  reviews    Review[]

  @@map("artworks")
}

model ArtworkFile {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  artworkId String   @db.Uuid
  fileName  String   @db.VarChar(255)
  fileUrl   String
  fileType  String   @db.VarChar(50)
  fileSize  Int
  createdAt DateTime @default(now())

  // Relations
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@map("artwork_files")
}

model Order {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  buyerId          String   @db.Uuid
  sellerId         String   @db.Uuid
  totalAmount      Decimal  @db.Decimal(10, 2)
  commissionAmount Decimal  @db.Decimal(10, 2)
  status           String   @default("pending") @db.VarChar(255)
  stripePaymentId  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  // Relations
  buyer     User        @relation("BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade)
  seller    User        @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Cascade)
  items     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   String   @db.Uuid
  artworkId String   @db.Uuid
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Favorite {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  artworkId String   @db.Uuid
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@unique([userId, artworkId])
  @@map("favorites")
}

model Review {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  buyerId   String   @db.Uuid
  sellerId  String   @db.Uuid
  artworkId String   @db.Uuid
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  buyer   User    @relation("BuyerReviews", fields: [buyerId], references: [id], onDelete: Cascade)
  seller  User    @relation("SellerReviews", fields: [sellerId], references: [id], onDelete: Cascade)
  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum ArtworkStatus {
  ACTIVE
  SOLD
  HIDDEN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

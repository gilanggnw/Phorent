// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artworks  Artwork[]
  orders    Order[]
  favorites Favorite[]
  reviews   Review[]

  @@map("users")
}

model Artwork {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  price       Float
  tags        String[] @default([])  // PostgreSQL array support
  medium      String?
  dimensions  String?
  isDigital   Boolean  @default(false)
  isCommission Boolean @default(false)
  status      ArtworkStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     ArtworkFile[]
  orders    OrderItem[]
  favorites Favorite[]
  reviews   Review[]

  @@map("artworks")
}

model ArtworkFile {
  id        String   @id @default(cuid())
  filename  String
  url       String
  type      String   // 'image' or 'video'
  size      Int
  order     Int      @default(0)
  createdAt DateTime @default(now())

  // Relations
  artworkId String
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@map("artwork_files")
}

model Order {
  id        String      @id @default(cuid())
  total     Float
  status    OrderStatus @default(PENDING)
  stripePaymentIntentId String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  userId String
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id    String @id @default(cuid())
  price Float

  // Relations
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  artworkId String
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  artworkId String
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@unique([userId, artworkId])
  @@map("favorites")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  artworkId String
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@unique([userId, artworkId])
  @@map("reviews")
}

enum ArtworkStatus {
  ACTIVE
  SOLD
  HIDDEN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}
